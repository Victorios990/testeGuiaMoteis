{
  "collection": {
    "_": {
      "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
      "exporter_id": "39304041"
    },
    "item": [
      {
        "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
        "name": "retornarLista",
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response is JSON\", function () {",
                "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                "});",
                "",
                "pm.test(\"Response has required fields\", function () {",
                "    let jsonData = pm.response.json();",
                "    pm.expect(jsonData).to.be.an(\"array\");",
                "    ",
                "    jsonData.forEach(user => {",
                "        pm.expect(user).to.have.property(\"id\");",
                "        pm.expect(user).to.have.property(\"name\");",
                "        pm.expect(user).to.have.property(\"username\");",
                "        pm.expect(user).to.have.property(\"email\");",
                "        pm.expect(user).to.have.property(\"address\");",
                "        pm.expect(user.address).to.have.property(\"street\");",
                "        pm.expect(user.address).to.have.property(\"suite\");",
                "        pm.expect(user.address).to.have.property(\"city\");",
                "        pm.expect(user.address).to.have.property(\"zipcode\");",
                "        pm.expect(user.address).to.have.property(\"geo\");",
                "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                "        pm.expect(user).to.have.property(\"phone\");",
                "        pm.expect(user).to.have.property(\"website\");",
                "        pm.expect(user).to.have.property(\"company\");",
                "    });",
                "});",
                ""
              ],
              "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
            }
          }
        ]
      },
      {
        "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
        "name": "Post data",
        "request": {
          "description": {
            "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Successful POST request\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                "});",
                "",
                "pm.test(\"Erro campo obrigatório\", function () {",
                "    pm.response.to.have.status(400);",
                "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                "});",
                "",
                "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                "    pm.response.to.have.status(400);",
                "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                "});",
                "",
                "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                "    pm.response.to.have.status(400);",
                "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                "});",
                "",
                "pm.test(\"Cadastro realizado com sucesso\", function () {",
                "    pm.response.to.have.status(201);",
                "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                "});"
              ],
              "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
            }
          }
        ]
      },
      {
        "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
        "name": "Simular erro 400",
        "request": {
          "description": {
            "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
            "options": {
              "raw": {
                "language": "javascript"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Successful POST request\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                "});",
                "",
                "pm.test(\"Erro campo obrigatório\", function () {",
                "    pm.response.to.have.status(400);",
                "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                "});",
                "",
                "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                "    pm.response.to.have.status(400);",
                "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                "});",
                "",
                "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                "    pm.response.to.have.status(400);",
                "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                "});",
                "",
                "pm.test(\"Cadastro realizado com sucesso\", function () {",
                "    pm.response.to.have.status(201);",
                "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                "});"
              ],
              "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
            }
          }
        ]
      },
      {
        "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
        "name": "Update data",
        "request": {
          "description": {
            "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "info"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "id",
                "value": "1"
              }
            ],
            "variable": []
          },
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Successful PUT request\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                "});",
                ""
              ],
              "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
            }
          }
        ]
      },
      {
        "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
        "name": "Delete data",
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "path": [
              "info"
            ],
            "host": [
              "{{base_url}}"
            ],
            "query": [
              {
                "key": "id",
                "value": "1"
              }
            ],
            "variable": []
          },
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Successful DELETE request\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                "});",
                ""
              ],
              "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "1",
        "key": "id"
      },
      {
        "type": "any",
        "value": "https://postman-rest-api-learner.glitch.me/",
        "key": "base_url"
      }
    ],
    "info": {
      "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
      "name": "testeGuiaMoteis",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "4215f758-6610-4a46-b1f6-78bde652cdf2",
    "values": []
  },
  "globals": {
    "id": "7e7169ff-6275-426e-b2f2-efd23b225a57",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 15,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 15,
        "pending": 0,
        "failed": 9
      },
      "testScripts": {
        "total": 10,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 242.6,
      "responseMin": 151,
      "responseMax": 392,
      "responseSd": 91.02439233524166,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1739299277741,
      "completed": 1739299279447
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ca3588a3-77cc-420f-b9db-fce324f46d20",
          "httpRequestId": "a85be6d1-d74d-4d64-bfe5-b1fe4648e054"
        },
        "item": {
          "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
          "name": "retornarLista",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    ",
                  "    jsonData.forEach(user => {",
                  "        pm.expect(user).to.have.property(\"id\");",
                  "        pm.expect(user).to.have.property(\"name\");",
                  "        pm.expect(user).to.have.property(\"username\");",
                  "        pm.expect(user).to.have.property(\"email\");",
                  "        pm.expect(user).to.have.property(\"address\");",
                  "        pm.expect(user.address).to.have.property(\"street\");",
                  "        pm.expect(user.address).to.have.property(\"suite\");",
                  "        pm.expect(user.address).to.have.property(\"city\");",
                  "        pm.expect(user.address).to.have.property(\"zipcode\");",
                  "        pm.expect(user.address).to.have.property(\"geo\");",
                  "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                  "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                  "        pm.expect(user).to.have.property(\"phone\");",
                  "        pm.expect(user).to.have.property(\"website\");",
                  "        pm.expect(user).to.have.property(\"company\");",
                  "    });",
                  "});",
                  ""
                ],
                "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "170524ce-ab79-4b19-8c53-93ff6a32aefa",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f13432c2-6f28-47ac-a6ac-6899a1a6d957",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 Feb 2025 18:41:17 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1735105718&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=AcdeweHf%2Bpq7ZEgTPNPS6E9ehiJC6ZAJE991yZO5p6E%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1735105718&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=AcdeweHf%2Bpq7ZEgTPNPS6E9ehiJC6ZAJE991yZO5p6E%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "999"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1735105761"
            },
            {
              "key": "Vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=43200"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"160d-1eMSsxeJRfnVLRBmYJSbCiJZ1qQ\""
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "HIT"
            },
            {
              "key": "Age",
              "value": "9584"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "910678e5aa5bf1ea-GRU"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            },
            {
              "key": "server-timing",
              "value": "cfL4;desc=\"?proto=TCP&rtt=23958&min_rtt=23811&rtt_var=9224&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2827&recv_bytes=733&delivery_rate=163265&cwnd=252&unsent_bytes=0&cid=2699b0e71ba79646&ts=42&x=0\""
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              76,
              101,
              97,
              110,
              110,
              101,
              32,
              71,
              114,
              97,
              104,
              97,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              66,
              114,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              83,
              105,
              110,
              99,
              101,
              114,
              101,
              64,
              97,
              112,
              114,
              105,
              108,
              46,
              98,
              105,
              122,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              75,
              117,
              108,
              97,
              115,
              32,
              76,
              105,
              103,
              104,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              65,
              112,
              116,
              46,
              32,
              53,
              53,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              71,
              119,
              101,
              110,
              98,
              111,
              114,
              111,
              117,
              103,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              57,
              50,
              57,
              57,
              56,
              45,
              51,
              56,
              55,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              51,
              55,
              46,
              51,
              49,
              53,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              56,
              49,
              46,
              49,
              52,
              57,
              54,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              49,
              45,
              55,
              55,
              48,
              45,
              55,
              51,
              54,
              45,
              56,
              48,
              51,
              49,
              32,
              120,
              53,
              54,
              52,
              52,
              50,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              104,
              105,
              108,
              100,
              101,
              103,
              97,
              114,
              100,
              46,
              111,
              114,
              103,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              82,
              111,
              109,
              97,
              103,
              117,
              101,
              114,
              97,
              45,
              67,
              114,
              111,
              110,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              77,
              117,
              108,
              116,
              105,
              45,
              108,
              97,
              121,
              101,
              114,
              101,
              100,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              45,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              110,
              101,
              117,
              114,
              97,
              108,
              45,
              110,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              104,
              97,
              114,
              110,
              101,
              115,
              115,
              32,
              114,
              101,
              97,
              108,
              45,
              116,
              105,
              109,
              101,
              32,
              101,
              45,
              109,
              97,
              114,
              107,
              101,
              116,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              50,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              69,
              114,
              118,
              105,
              110,
              32,
              72,
              111,
              119,
              101,
              108,
              108,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              65,
              110,
              116,
              111,
              110,
              101,
              116,
              116,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              83,
              104,
              97,
              110,
              110,
              97,
              64,
              109,
              101,
              108,
              105,
              115,
              115,
              97,
              46,
              116,
              118,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              86,
              105,
              99,
              116,
              111,
              114,
              32,
              80,
              108,
              97,
              105,
              110,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              56,
              55,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              87,
              105,
              115,
              111,
              107,
              121,
              98,
              117,
              114,
              103,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              57,
              48,
              53,
              54,
              54,
              45,
              55,
              55,
              55,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              52,
              51,
              46,
              57,
              53,
              48,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              45,
              51,
              52,
              46,
              52,
              54,
              49,
              56,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              48,
              49,
              48,
              45,
              54,
              57,
              50,
              45,
              54,
              53,
              57,
              51,
              32,
              120,
              48,
              57,
              49,
              50,
              53,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              97,
              110,
              97,
              115,
              116,
              97,
              115,
              105,
              97,
              46,
              110,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              68,
              101,
              99,
              107,
              111,
              119,
              45,
              67,
              114,
              105,
              115,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              80,
              114,
              111,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              100,
              105,
              100,
              97,
              99,
              116,
              105,
              99,
              32,
              99,
              111,
              110,
              116,
              105,
              110,
              103,
              101,
              110,
              99,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              115,
              121,
              110,
              101,
              114,
              103,
              105,
              122,
              101,
              32,
              115,
              99,
              97,
              108,
              97,
              98,
              108,
              101,
              32,
              115,
              117,
              112,
              112,
              108,
              121,
              45,
              99,
              104,
              97,
              105,
              110,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              51,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              67,
              108,
              101,
              109,
              101,
              110,
              116,
              105,
              110,
              101,
              32,
              66,
              97,
              117,
              99,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              83,
              97,
              109,
              97,
              110,
              116,
              104,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              78,
              97,
              116,
              104,
              97,
              110,
              64,
              121,
              101,
              115,
              101,
              110,
              105,
              97,
              46,
              110,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              68,
              111,
              117,
              103,
              108,
              97,
              115,
              32,
              69,
              120,
              116,
              101,
              110,
              115,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              56,
              52,
              55,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              77,
              99,
              75,
              101,
              110,
              122,
              105,
              101,
              104,
              97,
              118,
              101,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              53,
              57,
              53,
              57,
              48,
              45,
              52,
              49,
              53,
              55,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              54,
              56,
              46,
              54,
              49,
              48,
              50,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              45,
              52,
              55,
              46,
              48,
              54,
              53,
              51,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              49,
              45,
              52,
              54,
              51,
              45,
              49,
              50,
              51,
              45,
              52,
              52,
              52,
              55,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              114,
              97,
              109,
              105,
              114,
              111,
              46,
              105,
              110,
              102,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              82,
              111,
              109,
              97,
              103,
              117,
              101,
              114,
              97,
              45,
              74,
              97,
              99,
              111,
              98,
              115,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              70,
              97,
              99,
              101,
              32,
              116,
              111,
              32,
              102,
              97,
              99,
              101,
              32,
              98,
              105,
              102,
              117,
              114,
              99,
              97,
              116,
              101,
              100,
              32,
              105,
              110,
              116,
              101,
              114,
              102,
              97,
              99,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              101,
              45,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              115,
              116,
              114,
              97,
              116,
              101,
              103,
              105,
              99,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              52,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              32,
              76,
              101,
              98,
              115,
              97,
              99,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              75,
              97,
              114,
              105,
              97,
              110,
              110,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              74,
              117,
              108,
              105,
              97,
              110,
              110,
              101,
              46,
              79,
              67,
              111,
              110,
              110,
              101,
              114,
              64,
              107,
              111,
              114,
              121,
              46,
              111,
              114,
              103,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              72,
              111,
              101,
              103,
              101,
              114,
              32,
              77,
              97,
              108,
              108,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              65,
              112,
              116,
              46,
              32,
              54,
              57,
              50,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              83,
              111,
              117,
              116,
              104,
              32,
              69,
              108,
              118,
              105,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              53,
              51,
              57,
              49,
              57,
              45,
              52,
              50,
              53,
              55,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              50,
              57,
              46,
              52,
              53,
              55,
              50,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              45,
              49,
              54,
              52,
              46,
              50,
              57,
              57,
              48,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              52,
              57,
              51,
              45,
              49,
              55,
              48,
              45,
              57,
              54,
              50,
              51,
              32,
              120,
              49,
              53,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              107,
              97,
              108,
              101,
              46,
              98,
              105,
              122,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              82,
              111,
              98,
              101,
              108,
              45,
              67,
              111,
              114,
              107,
              101,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              77,
              117,
              108,
              116,
              105,
              45,
              116,
              105,
              101,
              114,
              101,
              100,
              32,
              122,
              101,
              114,
              111,
              32,
              116,
              111,
              108,
              101,
              114,
              97,
              110,
              99,
              101,
              32,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              105,
              118,
              105,
              116,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              116,
              114,
              97,
              110,
              115,
              105,
              116,
              105,
              111,
              110,
              32,
              99,
              117,
              116,
              116,
              105,
              110,
              103,
              45,
              101,
              100,
              103,
              101,
              32,
              119,
              101,
              98,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              53,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              67,
              104,
              101,
              108,
              115,
              101,
              121,
              32,
              68,
              105,
              101,
              116,
              114,
              105,
              99,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              75,
              97,
              109,
              114,
              101,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              76,
              117,
              99,
              105,
              111,
              95,
              72,
              101,
              116,
              116,
              105,
              110,
              103,
              101,
              114,
              64,
              97,
              110,
              110,
              105,
              101,
              46,
              99,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              83,
              107,
              105,
              108,
              101,
              115,
              32,
              87,
              97,
              108,
              107,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              51,
              53,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              82,
              111,
              115,
              99,
              111,
              101,
              118,
              105,
              101,
              119,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              51,
              51,
              50,
              54,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              51,
              49,
              46,
              56,
              49,
              50,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              54,
              50,
              46,
              53,
              51,
              52,
              50,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              40,
              50,
              53,
              52,
              41,
              57,
              53,
              52,
              45,
              49,
              50,
              56,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              100,
              101,
              109,
              97,
              114,
              99,
              111,
              46,
              105,
              110,
              102,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              75,
              101,
              101,
              98,
              108,
              101,
              114,
              32,
              76,
              76,
              67,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              85,
              115,
              101,
              114,
              45,
              99,
              101,
              110,
              116,
              114,
              105,
              99,
              32,
              102,
              97,
              117,
              108,
              116,
              45,
              116,
              111,
              108,
              101,
              114,
              97,
              110,
              116,
              32,
              115,
              111,
              108,
              117,
              116,
              105,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              114,
              101,
              118,
              111,
              108,
              117,
              116,
              105,
              111,
              110,
              105,
              122,
              101,
              32,
              101,
              110,
              100,
              45,
              116,
              111,
              45,
              101,
              110,
              100,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              54,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              77,
              114,
              115,
              46,
              32,
              68,
              101,
              110,
              110,
              105,
              115,
              32,
              83,
              99,
              104,
              117,
              108,
              105,
              115,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              76,
              101,
              111,
              112,
              111,
              108,
              100,
              111,
              95,
              67,
              111,
              114,
              107,
              101,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              75,
              97,
              114,
              108,
              101,
              121,
              95,
              68,
              97,
              99,
              104,
              64,
              106,
              97,
              115,
              112,
              101,
              114,
              46,
              105,
              110,
              102,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              78,
              111,
              114,
              98,
              101,
              114,
              116,
              111,
              32,
              67,
              114,
              111,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              65,
              112,
              116,
              46,
              32,
              57,
              53,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              83,
              111,
              117,
              116,
              104,
              32,
              67,
              104,
              114,
              105,
              115,
              116,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              50,
              51,
              53,
              48,
              53,
              45,
              49,
              51,
              51,
              55,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              55,
              49,
              46,
              52,
              49,
              57,
              55,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              55,
              49,
              46,
              55,
              52,
              55,
              56,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              49,
              45,
              52,
              55,
              55,
              45,
              57,
              51,
              53,
              45,
              56,
              52,
              55,
              56,
              32,
              120,
              54,
              52,
              51,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              111,
              108,
              97,
              46,
              111,
              114,
              103,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              67,
              111,
              110,
              115,
              105,
              100,
              105,
              110,
              101,
              45,
              76,
              111,
              99,
              107,
              109,
              97,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              83,
              121,
              110,
              99,
              104,
              114,
              111,
              110,
              105,
              115,
              101,
              100,
              32,
              98,
              111,
              116,
              116,
              111,
              109,
              45,
              108,
              105,
              110,
              101,
              32,
              105,
              110,
              116,
              101,
              114,
              102,
              97,
              99,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              101,
              45,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              105,
              110,
              110,
              111,
              118,
              97,
              116,
              105,
              118,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              55,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              75,
              117,
              114,
              116,
              105,
              115,
              32,
              87,
              101,
              105,
              115,
              115,
              110,
              97,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              69,
              108,
              119,
              121,
              110,
              46,
              83,
              107,
              105,
              108,
              101,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              84,
              101,
              108,
              108,
              121,
              46,
              72,
              111,
              101,
              103,
              101,
              114,
              64,
              98,
              105,
              108,
              108,
              121,
              46,
              98,
              105,
              122,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              82,
              101,
              120,
              32,
              84,
              114,
              97,
              105,
              108,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              50,
              56,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              72,
              111,
              119,
              101,
              109,
              111,
              117,
              116,
              104,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              53,
              56,
              56,
              48,
              52,
              45,
              49,
              48,
              57,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              50,
              52,
              46,
              56,
              57,
              49,
              56,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              50,
              49,
              46,
              56,
              57,
              56,
              52,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              50,
              49,
              48,
              46,
              48,
              54,
              55,
              46,
              54,
              49,
              51,
              50,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              101,
              108,
              118,
              105,
              115,
              46,
              105,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              74,
              111,
              104,
              110,
              115,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              98,
              108,
              101,
              32,
              109,
              117,
              108,
              116,
              105,
              109,
              101,
              100,
              105,
              97,
              32,
              116,
              97,
              115,
              107,
              45,
              102,
              111,
              114,
              99,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              101,
              45,
              116,
              97,
              105,
              108,
              101,
              114,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              56,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              78,
              105,
              99,
              104,
              111,
              108,
              97,
              115,
              32,
              82,
              117,
              110,
              111,
              108,
              102,
              115,
              100,
              111,
              116,
              116,
              105,
              114,
              32,
              86,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              77,
              97,
              120,
              105,
              109,
              101,
              95,
              78,
              105,
              101,
              110,
              111,
              119,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              83,
              104,
              101,
              114,
              119,
              111,
              111,
              100,
              64,
              114,
              111,
              115,
              97,
              109,
              111,
              110,
              100,
              46,
              109,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              69,
              108,
              108,
              115,
              119,
              111,
              114,
              116,
              104,
              32,
              83,
              117,
              109,
              109,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              55,
              50,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              65,
              108,
              105,
              121,
              97,
              118,
              105,
              101,
              119,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              52,
              53,
              49,
              54,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              49,
              52,
              46,
              51,
              57,
              57,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              45,
              49,
              50,
              48,
              46,
              55,
              54,
              55,
              55,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              53,
              56,
              54,
              46,
              52,
              57,
              51,
              46,
              54,
              57,
              52,
              51,
              32,
              120,
              49,
              52,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              106,
              97,
              99,
              121,
              110,
              116,
              104,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              65,
              98,
              101,
              114,
              110,
              97,
              116,
              104,
              121,
              32,
              71,
              114,
              111,
              117,
              112,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              73,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              32,
              99,
              111,
              110,
              99,
              101,
              112,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              101,
              45,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              101,
              120,
              116,
              101,
              110,
              115,
              105,
              98,
              108,
              101,
              32,
              101,
              45,
              116,
              97,
              105,
              108,
              101,
              114,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              57,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              71,
              108,
              101,
              110,
              110,
              97,
              32,
              82,
              101,
              105,
              99,
              104,
              101,
              114,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              68,
              101,
              108,
              112,
              104,
              105,
              110,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              67,
              104,
              97,
              105,
              109,
              95,
              77,
              99,
              68,
              101,
              114,
              109,
              111,
              116,
              116,
              64,
              100,
              97,
              110,
              97,
              46,
              105,
              111,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              68,
              97,
              121,
              110,
              97,
              32,
              80,
              97,
              114,
              107,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              52,
              52,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              66,
              97,
              114,
              116,
              104,
              111,
              108,
              111,
              109,
              101,
              98,
              117,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              55,
              54,
              52,
              57,
              53,
              45,
              51,
              49,
              48,
              57,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              50,
              52,
              46,
              54,
              52,
              54,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              45,
              49,
              54,
              56,
              46,
              56,
              56,
              56,
              57,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              40,
              55,
              55,
              53,
              41,
              57,
              55,
              54,
              45,
              54,
              55,
              57,
              52,
              32,
              120,
              52,
              49,
              50,
              48,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              99,
              111,
              110,
              114,
              97,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              89,
              111,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              83,
              111,
              110,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              83,
              119,
              105,
              116,
              99,
              104,
              97,
              98,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              117,
              97,
              108,
              108,
              121,
              45,
              98,
              97,
              115,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              97,
              103,
              103,
              114,
              101,
              103,
              97,
              116,
              101,
              32,
              114,
              101,
              97,
              108,
              45,
              116,
              105,
              109,
              101,
              32,
              116,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              105,
              101,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              67,
              108,
              101,
              109,
              101,
              110,
              116,
              105,
              110,
              97,
              32,
              68,
              117,
              66,
              117,
              113,
              117,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              77,
              111,
              114,
              105,
              97,
              104,
              46,
              83,
              116,
              97,
              110,
              116,
              111,
              110,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              82,
              101,
              121,
              46,
              80,
              97,
              100,
              98,
              101,
              114,
              103,
              64,
              107,
              97,
              114,
              105,
              110,
              97,
              46,
              98,
              105,
              122,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              75,
              97,
              116,
              116,
              105,
              101,
              32,
              84,
              117,
              114,
              110,
              112,
              105,
              107,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              83,
              117,
              105,
              116,
              101,
              32,
              49,
              57,
              56,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              76,
              101,
              98,
              115,
              97,
              99,
              107,
              98,
              117,
              114,
              121,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              51,
              49,
              52,
              50,
              56,
              45,
              50,
              50,
              54,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              45,
              51,
              56,
              46,
              50,
              51,
              56,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              53,
              55,
              46,
              50,
              50,
              51,
              50,
              34,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              48,
              50,
              52,
              45,
              54,
              52,
              56,
              45,
              51,
              56,
              48,
              52,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              97,
              109,
              98,
              114,
              111,
              115,
              101,
              46,
              110,
              101,
              116,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              72,
              111,
              101,
              103,
              101,
              114,
              32,
              76,
              76,
              67,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              67,
              101,
              110,
              116,
              114,
              97,
              108,
              105,
              122,
              101,
              100,
              32,
              101,
              109,
              112,
              111,
              119,
              101,
              114,
              105,
              110,
              103,
              32,
              116,
              97,
              115,
              107,
              45,
              102,
              111,
              114,
              99,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              116,
              97,
              114,
              103,
              101,
              116,
              32,
              101,
              110,
              100,
              45,
              116,
              111,
              45,
              101,
              110,
              100,
              32,
              109,
              111,
              100,
              101,
              108,
              115,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              10,
              93
            ]
          },
          "cookie": [],
          "responseTime": 151,
          "responseSize": 5645
        },
        "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is JSON",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response is JSON",
              "message": "expected 'Content-Type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
              "stack": "AssertionError: expected 'Content-Type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Response has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6fa764c6-04ac-4602-a823-49d4e0723f5f",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6122eff4-d0a1-47e4-8ce0-17ef8d098290"
        },
        "item": {
          "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
          "name": "Post data",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b09756ac-28a5-468f-8896-847348546a6d",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "499",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9bd83747-2878-4a10-afab-2d5601c0e918",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 Feb 2025 18:41:18 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "444"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1739299278&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=A7y24U%2F%2FCorMID0raN97OLF5ABtmqajfXo77abqwv8Q%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1739299278&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=A7y24U%2F%2FCorMID0raN97OLF5ABtmqajfXo77abqwv8Q%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "999"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1739299322"
            },
            {
              "key": "Vary",
              "value": "Origin, X-HTTP-Method-Override, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Location"
            },
            {
              "key": "Location",
              "value": "https://jsonplaceholder.typicode.com/users/11"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"1bc-18vRr9JOp45iG6hJzyvLpXXYJ/U\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "910678e6adc6f1ea-GRU"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            },
            {
              "key": "server-timing",
              "value": "cfL4;desc=\"?proto=TCP&rtt=24209&min_rtt=23811&rtt_var=7420&sent=11&recv=7&lost=0&retrans=0&sent_bytes=6567&recv_bytes=1553&delivery_rate=314232&cwnd=252&unsent_bytes=0&cid=2699b0e71ba79646&ts=552&x=0\""
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              34,
              44,
              10,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              78,
              111,
              118,
              111,
              85,
              115,
              101,
              114,
              34,
              44,
              10,
              32,
              32,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              118,
              111,
              64,
              116,
              101,
              115,
              116,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              116,
              114,
              101,
              101,
              116,
              34,
              58,
              32,
              34,
              82,
              117,
              97,
              32,
              78,
              111,
              118,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              115,
              117,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              65,
              112,
              116,
              46,
              32,
              49,
              50,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              105,
              116,
              121,
              34,
              58,
              32,
              34,
              67,
              105,
              100,
              97,
              100,
              101,
              78,
              111,
              118,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              122,
              105,
              112,
              99,
              111,
              100,
              101,
              34,
              58,
              32,
              34,
              49,
              50,
              51,
              52,
              53,
              45,
              54,
              55,
              56,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              103,
              101,
              111,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              97,
              116,
              34,
              58,
              32,
              34,
              48,
              46,
              48,
              48,
              48,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              34,
              108,
              110,
              103,
              34,
              58,
              32,
              34,
              48,
              46,
              48,
              48,
              48,
              48,
              34,
              10,
              32,
              32,
              32,
              32,
              125,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              32,
              34,
              49,
              50,
              51,
              45,
              52,
              53,
              54,
              45,
              55,
              56,
              57,
              48,
              34,
              44,
              10,
              32,
              32,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              34,
              58,
              32,
              34,
              110,
              111,
              118,
              111,
              115,
              105,
              116,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              34,
              99,
              111,
              109,
              112,
              97,
              110,
              121,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              32,
              34,
              78,
              111,
              118,
              97,
              32,
              69,
              109,
              112,
              114,
              101,
              115,
              97,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              116,
              99,
              104,
              80,
              104,
              114,
              97,
              115,
              101,
              34,
              58,
              32,
              34,
              73,
              110,
              111,
              118,
              97,
              110,
              100,
              111,
              32,
              115,
              101,
              109,
              112,
              114,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              98,
              115,
              34,
              58,
              32,
              34,
              101,
              120,
              112,
              97,
              110,
              100,
              105,
              114,
              32,
              109,
              101,
              114,
              99,
              97,
              100,
              111,
              115,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              49,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 392,
          "responseSize": 444
        },
        "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
        "assertions": [
          {
            "assertion": "Successful POST request",
            "skipped": false
          },
          {
            "assertion": "Erro campo obrigatório",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Erro campo obrigatório",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Deve retornar erro ao enviar sem informações",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Deve retornar erro ao enviar sem informações",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Deve retornar erro quando os e-mails não coincidirem",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Deve retornar erro quando os e-mails não coincidirem",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "Cadastro realizado com sucesso",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Cadastro realizado com sucesso",
              "message": "expected { Object (name, username, ...) } in response to contain property 'mensagem'",
              "stack": "AssertionError: expected { Object (name, username, ...) } in response to contain property 'mensagem'\n   at Object.eval sandbox-script.js:5:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2fb88f17-5525-44a1-98b6-86260358b0af",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff4ed8f1-94a3-4f37-ba99-dd4dca88c89b"
        },
        "item": {
          "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
          "name": "Simular erro 400",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
              "options": {
                "raw": {
                  "language": "javascript"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "users"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/javascript",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d84025ed-064c-4241-8041-17b781573b89",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "514",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
            "options": {
              "raw": {
                "language": "javascript"
              }
            }
          }
        },
        "response": {
          "id": "c0abb2bd-0257-4c90-b9ae-f659eddf47e3",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Tue, 11 Feb 2025 18:41:18 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1739299278&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=A7y24U%2F%2FCorMID0raN97OLF5ABtmqajfXo77abqwv8Q%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1739299278&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=A7y24U%2F%2FCorMID0raN97OLF5ABtmqajfXo77abqwv8Q%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "998"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1739299322"
            },
            {
              "key": "Vary",
              "value": "Origin, X-HTTP-Method-Override, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Location"
            },
            {
              "key": "Location",
              "value": "https://jsonplaceholder.typicode.com/users/11"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"e-HA6WWAG/c4REvZ4q9d0N16BTb2A\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "cf-cache-status",
              "value": "DYNAMIC"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "910678e9b891f1ea-GRU"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            },
            {
              "key": "server-timing",
              "value": "cfL4;desc=\"?proto=TCP&rtt=24468&min_rtt=23811&rtt_var=6082&sent=15&recv=9&lost=0&retrans=0&sent_bytes=8488&recv_bytes=2394&delivery_rate=314232&cwnd=252&unsent_bytes=0&cid=2699b0e71ba79646&ts=804&x=0\""
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              49,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 158,
          "responseSize": 14
        },
        "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
        "assertions": [
          {
            "assertion": "Successful POST request",
            "skipped": false
          },
          {
            "assertion": "Erro campo obrigatório",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Erro campo obrigatório",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Deve retornar erro ao enviar sem informações",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Deve retornar erro ao enviar sem informações",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "Deve retornar erro quando os e-mails não coincidirem",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Deve retornar erro quando os e-mails não coincidirem",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:4:3)"
            }
          },
          {
            "assertion": "Cadastro realizado com sucesso",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Cadastro realizado com sucesso",
              "message": "expected { id: 11 } in response to contain property 'mensagem'",
              "stack": "AssertionError: expected { id: 11 } in response to contain property 'mensagem'\n   at Object.eval sandbox-script.js:5:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "500e7c1f-0da5-46d8-afcb-5f291bfb50d7",
          "length": 5,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d740bcd3-faec-4be3-9b36-ad946244ffbf"
        },
        "item": {
          "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
          "name": "Update data",
          "request": {
            "description": {
              "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "info"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful PUT request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "",
              "info"
            ],
            "host": [
              "postman-rest-api-learner",
              "glitch",
              "me"
            ],
            "query": [
              {
                "key": "id",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4c0dd71e-9569-4fed-8f14-ddb25c231084",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-rest-api-learner.glitch.me",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "4d00eb4a-e6a2-4085-b538-5683f6b6dbcc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "120"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "etag",
              "value": "W/\"78-n1hFL72ixoITkwuuelGF9/7BB5s\""
            },
            {
              "key": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "key": "Date",
              "value": "Tue, 11 Feb 2025 18:41:18 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 varnish"
            },
            {
              "key": "X-Served-By",
              "value": "cache-gru-sbsp2090056-GRU"
            },
            {
              "key": "X-Cache",
              "value": "MISS"
            },
            {
              "key": "X-Cache-Hits",
              "value": "0"
            },
            {
              "key": "X-Timer",
              "value": "S1739299279.669505,VS0,VE210"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              89,
              111,
              117,
              32,
              109,
              97,
              100,
              101,
              32,
              97,
              32,
              80,
              85,
              84,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              105,
              100,
              61,
              49,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              100,
              97,
              116,
              97,
              33,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              100,
              32,
              121,
              111,
              117,
              114,
              32,
              110,
              97,
              109,
              101,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              98,
              111,
              100,
              121,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 296,
          "responseSize": 120
        },
        "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
        "assertions": [
          {
            "assertion": "Successful PUT request",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57a932ac-eb79-44b5-ac47-45dbc71cedd4",
          "length": 5,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8fc1db72-1409-407d-8719-8551c74ac14c"
        },
        "item": {
          "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
          "name": "Delete data",
          "request": {
            "description": {
              "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "info"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Successful DELETE request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                  "});",
                  ""
                ],
                "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "",
              "info"
            ],
            "host": [
              "postman-rest-api-learner",
              "glitch",
              "me"
            ],
            "query": [
              {
                "key": "id",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5e06c094-efc8-451f-8925-2f5aab43fa2d",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-rest-api-learner.glitch.me",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1b3f0156-c439-442d-8f18-2abe5ae6ec43",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Length",
              "value": "55"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "x-powered-by",
              "value": "Express"
            },
            {
              "key": "etag",
              "value": "W/\"37-Avb8HdSXYFG7v9MAHgR6oLX97hQ\""
            },
            {
              "key": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "key": "Date",
              "value": "Tue, 11 Feb 2025 18:41:19 GMT"
            },
            {
              "key": "Via",
              "value": "1.1 varnish"
            },
            {
              "key": "X-Served-By",
              "value": "cache-gru-sbsp2090056-GRU"
            },
            {
              "key": "X-Cache",
              "value": "MISS"
            },
            {
              "key": "X-Cache-Hits",
              "value": "0"
            },
            {
              "key": "X-Timer",
              "value": "S1739299279.992211,VS0,VE188"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              89,
              111,
              117,
              32,
              109,
              97,
              100,
              101,
              32,
              97,
              32,
              68,
              69,
              76,
              69,
              84,
              69,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              116,
              111,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              32,
              105,
              100,
              61,
              49,
              33,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 216,
          "responseSize": 55
        },
        "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
        "assertions": [
          {
            "assertion": "Successful DELETE request",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 6278
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response is JSON",
          "message": "expected 'Content-Type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
          "stack": "AssertionError: expected 'Content-Type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "1914e9512a95399a013b28f9228edf9b",
          "id": "e9669c7b-c4a7-4932-979c-403574c78a76",
          "timestamp": 1739299278001,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
          "name": "retornarLista",
          "request": {
            "description": {
              "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is JSON\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    let jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    ",
                  "    jsonData.forEach(user => {",
                  "        pm.expect(user).to.have.property(\"id\");",
                  "        pm.expect(user).to.have.property(\"name\");",
                  "        pm.expect(user).to.have.property(\"username\");",
                  "        pm.expect(user).to.have.property(\"email\");",
                  "        pm.expect(user).to.have.property(\"address\");",
                  "        pm.expect(user.address).to.have.property(\"street\");",
                  "        pm.expect(user.address).to.have.property(\"suite\");",
                  "        pm.expect(user.address).to.have.property(\"city\");",
                  "        pm.expect(user.address).to.have.property(\"zipcode\");",
                  "        pm.expect(user.address).to.have.property(\"geo\");",
                  "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                  "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                  "        pm.expect(user).to.have.property(\"phone\");",
                  "        pm.expect(user).to.have.property(\"website\");",
                  "        pm.expect(user).to.have.property(\"company\");",
                  "    });",
                  "});",
                  ""
                ],
                "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 5,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ca3588a3-77cc-420f-b9db-fce324f46d20",
          "httpRequestId": "a85be6d1-d74d-4d64-bfe5-b1fe4648e054",
          "scriptId": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
          "execution": "464c788a-d327-4df3-a65c-a61eacbace45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Erro campo obrigatório",
          "message": "expected response to have status code 400 but got 201",
          "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "dd6dcf0eac25550981cbe496428fa21f",
          "id": "f4bf9239-73e3-40a4-9f17-9c907d0e8c59",
          "timestamp": 1739299278488,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
          "name": "Post data",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6fa764c6-04ac-4602-a823-49d4e0723f5f",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6122eff4-d0a1-47e4-8ce0-17ef8d098290",
          "scriptId": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
          "execution": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Deve retornar erro ao enviar sem informações",
          "message": "expected response to have status code 400 but got 201",
          "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "da937df2762cbba301c7c48f0282c733",
          "id": "057d8208-343c-4bce-8fb9-af259466d7dc",
          "timestamp": 1739299278489,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
          "name": "Post data",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6fa764c6-04ac-4602-a823-49d4e0723f5f",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6122eff4-d0a1-47e4-8ce0-17ef8d098290",
          "scriptId": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
          "execution": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Deve retornar erro quando os e-mails não coincidirem",
          "message": "expected response to have status code 400 but got 201",
          "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "a9b341f85a75e532fdaa5e605848f90e",
          "id": "0b7316e3-d2d8-4793-896a-e682a4974b9a",
          "timestamp": 1739299278490,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
          "name": "Post data",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6fa764c6-04ac-4602-a823-49d4e0723f5f",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6122eff4-d0a1-47e4-8ce0-17ef8d098290",
          "scriptId": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
          "execution": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Cadastro realizado com sucesso",
          "message": "expected { Object (name, username, ...) } in response to contain property 'mensagem'",
          "stack": "AssertionError: expected { Object (name, username, ...) } in response to contain property 'mensagem'\n   at Object.eval sandbox-script.js:5:2)",
          "checksum": "2ec76ab05eb45b719b233138a49af091",
          "id": "da9eb08f-cb3f-49d8-b272-706425a9b27f",
          "timestamp": 1739299278492,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
          "name": "Post data",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "6fa764c6-04ac-4602-a823-49d4e0723f5f",
          "length": 5,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6122eff4-d0a1-47e4-8ce0-17ef8d098290",
          "scriptId": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
          "execution": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Erro campo obrigatório",
          "message": "expected response to have status code 400 but got 201",
          "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "d063dc03ef1aacbf8618b0a5cf8073b5",
          "id": "9f054b4b-caff-4c3a-8e1a-b3ff0eacceb8",
          "timestamp": 1739299278731,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
          "name": "Simular erro 400",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
              "options": {
                "raw": {
                  "language": "javascript"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2fb88f17-5525-44a1-98b6-86260358b0af",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff4ed8f1-94a3-4f37-ba99-dd4dca88c89b",
          "scriptId": "be8c2fad-4e74-4597-8452-0ea806a92d97",
          "execution": "cd0f6a54-88e9-439a-971b-244649f81638"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Deve retornar erro ao enviar sem informações",
          "message": "expected response to have status code 400 but got 201",
          "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "440a7a4a70d3c7fa8c5eb05e95ad1b98",
          "id": "f9ba8fe4-caf1-4337-8a32-8e1539ec880b",
          "timestamp": 1739299278732,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
          "name": "Simular erro 400",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
              "options": {
                "raw": {
                  "language": "javascript"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2fb88f17-5525-44a1-98b6-86260358b0af",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff4ed8f1-94a3-4f37-ba99-dd4dca88c89b",
          "scriptId": "be8c2fad-4e74-4597-8452-0ea806a92d97",
          "execution": "cd0f6a54-88e9-439a-971b-244649f81638"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Deve retornar erro quando os e-mails não coincidirem",
          "message": "expected response to have status code 400 but got 201",
          "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "a16ec192c970b0786a5f2d11807e104f",
          "id": "39b8ec06-aa46-48ab-96f1-db2c3681c4a6",
          "timestamp": 1739299278733,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
          "name": "Simular erro 400",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
              "options": {
                "raw": {
                  "language": "javascript"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2fb88f17-5525-44a1-98b6-86260358b0af",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff4ed8f1-94a3-4f37-ba99-dd4dca88c89b",
          "scriptId": "be8c2fad-4e74-4597-8452-0ea806a92d97",
          "execution": "cd0f6a54-88e9-439a-971b-244649f81638"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Cadastro realizado com sucesso",
          "message": "expected { id: 11 } in response to contain property 'mensagem'",
          "stack": "AssertionError: expected { id: 11 } in response to contain property 'mensagem'\n   at Object.eval sandbox-script.js:5:3)",
          "checksum": "0f7e77906b0a2330e666000f9f25e288",
          "id": "9f59ce9e-96ce-4163-ab29-7578e915a6ef",
          "timestamp": 1739299278734,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
          "name": "Simular erro 400",
          "request": {
            "description": {
              "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "users"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
              "options": {
                "raw": {
                  "language": "javascript"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Successful POST request\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Erro campo obrigatório\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                  "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                  "});",
                  "",
                  "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                  "    pm.response.to.have.status(400);",
                  "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                  "});",
                  "",
                  "pm.test(\"Cadastro realizado com sucesso\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                  "});"
                ],
                "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "exporter_id": "39304041"
          },
          "item": [
            {
              "id": "aafd0c9a-7598-4d88-8171-e68775a7f435",
              "name": "retornarLista",
              "request": {
                "description": {
                  "content": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb9bfda-359c-4e82-be9a-1d85882eb8e2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is JSON\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
                      "});",
                      "",
                      "pm.test(\"Response has required fields\", function () {",
                      "    let jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    ",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user).to.have.property(\"id\");",
                      "        pm.expect(user).to.have.property(\"name\");",
                      "        pm.expect(user).to.have.property(\"username\");",
                      "        pm.expect(user).to.have.property(\"email\");",
                      "        pm.expect(user).to.have.property(\"address\");",
                      "        pm.expect(user.address).to.have.property(\"street\");",
                      "        pm.expect(user.address).to.have.property(\"suite\");",
                      "        pm.expect(user.address).to.have.property(\"city\");",
                      "        pm.expect(user.address).to.have.property(\"zipcode\");",
                      "        pm.expect(user.address).to.have.property(\"geo\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lat\");",
                      "        pm.expect(user.address.geo).to.have.property(\"lng\");",
                      "        pm.expect(user).to.have.property(\"phone\");",
                      "        pm.expect(user).to.have.property(\"website\");",
                      "        pm.expect(user).to.have.property(\"company\");",
                      "    });",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "464c788a-d327-4df3-a65c-a61eacbace45"
                  }
                }
              ]
            },
            {
              "id": "90dcb976-4eb5-48b1-8df3-a52a9c5a2558",
              "name": "Post data",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"\",\n    \"username\": \"NovoUser\",\n    \"email\": \"novo@teste.com\",\n    \"address\": {\n        \"street\": \"Rua Nova\",\n        \"suite\": \"Apt. 123\",\n        \"city\": \"CidadeNova\",\n        \"zipcode\": \"12345-678\",\n        \"geo\": {\n            \"lat\": \"0.0000\",\n            \"lng\": \"0.0000\"\n        }\n    },\n    \"phone\": \"123-456-7890\",\n    \"website\": \"novosite.com\",\n    \"company\": {\n        \"name\": \"Nova Empresa\",\n        \"catchPhrase\": \"Inovando sempre\",\n        \"bs\": \"expandir mercados\"\n    }\n}\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a585fe96-12d6-4b2a-8fec-7046255d8afe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "c4ea8396-bf7f-4a57-84ab-e3d7257bc081"
                  }
                }
              ]
            },
            {
              "id": "88952fbb-28ab-434e-b08d-7ce638979eea",
              "name": "Simular erro 400",
              "request": {
                "description": {
                  "content": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "users"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Error message is correct\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n    pm.expect(jsonData.error).to.eql(\"Invalid request\");\n});\n\npm.test(\"Status code is 500\", function () {\n    pm.response.to.have.status(500);\n});\n\npm.test(\"Error message exists\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"error\");\n});\n",
                  "options": {
                    "raw": {
                      "language": "javascript"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be8c2fad-4e74-4597-8452-0ea806a92d97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful POST request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                      "});",
                      "",
                      "pm.test(\"Erro campo obrigatório\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erro', 'Este campo é obrigatório');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro ao enviar sem informações\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroEmail', 'Preencha este campo.'); ",
                      "    pm.response.to.have.jsonBody('erroSenha', 'Preencha este campo.');",
                      "});",
                      "",
                      "pm.test(\"Deve retornar erro quando os e-mails não coincidirem\", function () {",
                      "    pm.response.to.have.status(400);",
                      "    pm.response.to.have.jsonBody('erroConfirmacaoEmail', 'Os e-mails não coincidem.');",
                      "});",
                      "",
                      "pm.test(\"Cadastro realizado com sucesso\", function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.response.to.have.jsonBody('mensagem', 'Cadastro realizado com sucesso!');",
                      "});"
                    ],
                    "_lastExecutionId": "cd0f6a54-88e9-439a-971b-244649f81638"
                  }
                }
              ]
            },
            {
              "id": "458705d7-7bcc-4ff7-8348-bba37d82eeff",
              "name": "Update data",
              "request": {
                "description": {
                  "content": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "26916cb0-5131-41af-bdcd-2650f04dc4a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Successful PUT request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 500]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "65d0e00c-7dca-434b-b732-248d14b9ee43"
                  }
                }
              ]
            },
            {
              "id": "3f8b4db7-646c-4bb7-9ca2-3ea0097f770c",
              "name": "Delete data",
              "request": {
                "description": {
                  "content": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "info"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4b90bb29-7998-4c40-a6b0-bdc3b0ebde41",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Successful DELETE request\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "a8a84d12-ac51-4b4f-9807-27094463cf16"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "37582730-12df-4ee5-a23b-e243e8a0c801",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8b5ba54e-28a1-4273-8ba9-c8a0e308d8ce"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "81761991-21e8-4db4-bb4e-1942d9a2591d",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "4f2aa61d-4a10-465e-ba0b-f12d06b04ddf"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "1",
              "key": "id"
            },
            {
              "type": "any",
              "value": "https://postman-rest-api-learner.glitch.me/",
              "key": "base_url"
            }
          ],
          "info": {
            "_postman_id": "8b1b866b-eece-43d9-8074-e80d2d841721",
            "name": "testeGuiaMoteis",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "2fb88f17-5525-44a1-98b6-86260358b0af",
          "length": 5,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ff4ed8f1-94a3-4f37-ba99-dd4dca88c89b",
          "scriptId": "be8c2fad-4e74-4597-8452-0ea806a92d97",
          "execution": "cd0f6a54-88e9-439a-971b-244649f81638"
        }
      }
    ],
    "error": null
  }
}